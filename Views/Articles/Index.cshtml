@using ArticleManagement.Web.Models.Articles
@using ArticleManagement.Web.Models.Shared
@model PaginatedResponse<ArticleViewModel>

@{
  ViewData["Title"] = "Lista de Artículos";
}

<h2 class="mb-4">Últimos artículos</h2>

@if (Model?.Items != null && Model.Items.Any())
{
    <div class="list-group">
        @foreach (var article in Model.Items)
        {
            <div class="list-group-item list-group-item-action mb-3 shadow-sm rounded">
                <h5 class="mb-1">@article.Title</h5>
                <small class="text-muted">
                    Por <strong>@article.Author</strong> - @article.PublishedDate.ToShortDateString()
                </small>
                <p class="mb-1 mt-2">
                    @(
                                article.Content.Length > 200
                                ? article.Content.Substring(0, 200) + "..."
                                : article.Content
                                )
            </p>
            <a href="@Url.Action("Details", "Articles", new { id = article.Id })" class="btn btn-sm btn-primary">
                Ver artículo
            </a>
        </div>
        }
    </div>

  <nav class="mt-4 d-flex justify-content-center">
    <ul class="pagination">
      @if (Model.Pagination.HasPreviousPage)
      {
        <li class="page-item">
          <a class="page-link" href="?pageIndex=@(Model.Pagination.PageIndex - 1)&pageSize=@Model.Pagination.PageSize">Anterior</a>
        </li>
      }

      <li class="page-item active">
        <span class="page-link">@Model.Pagination.PageIndex</span>
      </li>

      @if (Model.Pagination.HasNextPage)
      {
        <li class="page-item">
          <a class="page-link" href="?pageIndex=@(Model.Pagination.PageIndex + 1)&pageSize=@Model.Pagination.PageSize">Siguiente</a>
        </li>
      }
    </ul>
  </nav>
}
else
{
  <div class="alert alert-info">
    No hay artículos disponibles.
  </div>
}